# Copyright (c) 2020 The Orbit Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

cmake_minimum_required(VERSION 3.15)

project(OrbitBase)

add_library(OrbitBase STATIC)

target_include_directories(OrbitBase PUBLIC
        ${CMAKE_CURRENT_LIST_DIR}/include)

target_include_directories(OrbitBase PRIVATE
        ${CMAKE_CURRENT_LIST_DIR})

target_sources(OrbitBase PRIVATE
        include/OrbitBase/Action.h
        include/OrbitBase/Align.h
        include/OrbitBase/AnyInvocable.h
        include/OrbitBase/AnyMovable.h
        include/OrbitBase/Append.h
        include/OrbitBase/CrashHandler.h
        include/OrbitBase/ExecutablePath.h
        include/OrbitBase/ExecuteCommand.h
        include/OrbitBase/Executor.h
        include/OrbitBase/File.h
        include/OrbitBase/Future.h
        include/OrbitBase/FutureHelpers.h
        include/OrbitBase/JoinFutures.h
        include/OrbitBase/Logging.h
        include/OrbitBase/MakeUniqueForOverwrite.h
        include/OrbitBase/GetProcessIds.h
        include/OrbitBase/Profiling.h
        include/OrbitBase/Promise.h
        include/OrbitBase/PromiseHelpers.h
        include/OrbitBase/ReadFileToString.h
        include/OrbitBase/SafeStrerror.h
        include/OrbitBase/SharedState.h
        include/OrbitBase/SimpleExecutor.h
        include/OrbitBase/TemporaryFile.h
        include/OrbitBase/ThreadConstants.h
        include/OrbitBase/ThreadPool.h
        include/OrbitBase/ThreadUtils.h
        include/OrbitBase/UniqueResource.h
        include/OrbitBase/WriteStringToFile.h)

target_sources(OrbitBase PRIVATE
        ExecutablePath.cpp
        File.cpp
        JoinFutures.cpp
        Logging.cpp
        LoggingUtils.cpp
        Profiling.cpp
        ReadFileToString.cpp
        SafeStrerror.cpp
        SimpleExecutor.cpp
        TemporaryFile.cpp
        ThreadPool.cpp
        WriteStringToFile.cpp)

if (WIN32)
target_sources(OrbitBase PRIVATE
        include/OrbitBase/GetLastError.h)

target_sources(OrbitBase PRIVATE
        ExecutablePathWindows.cpp
        GetLastError.cpp
        ThreadUtilsWindows.cpp)
else()
target_sources(OrbitBase PRIVATE
        ExecutablePathLinux.cpp
        ExecuteCommandLinux.cpp
        GetProcessIdsLinux.cpp
        ThreadUtilsLinux.cpp)
endif()

target_link_libraries(OrbitBase PUBLIC
        CONAN_PKG::abseil
        CONAN_PKG::outcome
        std::filesystem)


add_executable(OrbitBaseTests)

target_sources(OrbitBaseTests PRIVATE
        AlignTest.cpp
        AnyInvocableTest.cpp
        AnyMovableTest.cpp
        AppendTest.cpp
        ExecutablePathTest.cpp
        ExecutorTest.cpp
        FileTest.cpp
        FutureTest.cpp
        FutureHelpersTest.cpp
        ImmediateExecutorTest.cpp
        JoinFuturesTest.cpp
        LoggingUtilsTest.cpp
        ProfilingTest.cpp
        PromiseTest.cpp
        PromiseHelpersTest.cpp
        ReadFileToStringTest.cpp
        SimpleExecutorTest.cpp
        TemporaryFileTest.cpp
        ThreadUtilsTest.cpp
        UniqueResourceTest.cpp
        WriteStringToFileTest.cpp
)

if (NOT WIN32)
target_sources(OrbitBaseTests PRIVATE
        ExecutablePathLinuxTest.cpp
        ExecuteCommandLinuxTest.cpp
        GetProcessIdsLinuxTest.cpp)
endif()

# Threadpool test contains some sleeps we couldn't work around - disable them on the CI
# since they are flaky there (but they work fine on local workstations).
if (NOT (WIN32 AND "$ENV{QT_QPA_PLATFORM}" STREQUAL "offscreen"))
target_sources(OrbitBaseTests PRIVATE
        ThreadPoolTest.cpp
)
endif()

target_link_libraries(OrbitBaseTests PRIVATE
        OrbitBase
        TestUtils
        GTest::GTest
        GTest::Main)

register_test(OrbitBaseTests)
