// Copyright (c) 2020 The Orbit Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

syntax = "proto3";

package orbit_grpc_protos;

import "capture.proto";
import "code_block.proto";
import "module.proto";
import "process.proto";
import "tracepoint.proto";

option cc_enable_arenas = true;

message CaptureRequest {
  CaptureOptions capture_options = 1;
}

message CaptureResponse {
  reserved 1;
  repeated ClientCaptureEvent capture_events = 2;
}

service CaptureService {
  rpc Capture(stream CaptureRequest) returns (stream CaptureResponse) {}
}

message GetProcessListRequest {}

message GetProcessListResponse {
  repeated ProcessInfo processes = 1;
}

message GetModuleListRequest {
  uint32 process_id = 1;
}

message GetModuleListResponse {
  repeated ModuleInfo modules = 1;
}

message GetTracepointListRequest {}

message GetTracepointListResponse {
  repeated TracepointInfo tracepoints = 1;
}

message GetProcessMemoryRequest {
  uint32 pid = 1;
  uint64 address = 2;
  uint64 size = 3;
}

message GetProcessMemoryResponse {
  bytes memory = 1;
}

message GetDebugInfoFileRequest {
  reserved 2;
  string module_path = 1;
  repeated string additional_search_directories = 3;
}

message GetDebugInfoFileResponse {
  string debug_info_file_path = 1;
}

service ProcessService {
  rpc GetProcessList(GetProcessListRequest) returns (GetProcessListResponse) {}

  rpc GetModuleList(GetModuleListRequest) returns (GetModuleListResponse) {}

  rpc GetProcessMemory(GetProcessMemoryRequest)
      returns (GetProcessMemoryResponse) {}

  rpc GetDebugInfoFile(GetDebugInfoFileRequest)
      returns (GetDebugInfoFileResponse) {}
}

service TracepointService {
  rpc GetTracepointList(GetTracepointListRequest)
      returns (GetTracepointListResponse) {}
}

message ValidateFramePointersRequest {
  string module_path = 1;
  repeated CodeBlock functions = 2;
}

message ValidateFramePointersResponse {
  repeated CodeBlock functions_without_frame_pointer = 1;
}

service FramePointerValidatorService {
  rpc ValidateFramePointers(ValidateFramePointersRequest)
      returns (ValidateFramePointersResponse) {}
}

message CrashOrbitServiceRequest {
  enum CrashType {
    CHECK_FALSE = 0;
    OBSOLETE_NULL_POINTER_DEREFERENCE = 1;
    STACK_OVERFLOW = 2;
  }
  CrashType crash_type = 1;
}

message CrashOrbitServiceResponse {}

service CrashService {
  rpc CrashOrbitService(CrashOrbitServiceRequest)
      returns (CrashOrbitServiceResponse) {}
}
